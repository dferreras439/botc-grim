name: ðŸš€ Scaffold & Deploy Modern Vite React â†’ GitHub Pages

on:
  workflow_dispatch:

permissions:
  contents: write   # for pushing gh-pages branch
  pages: write      # for deploying via deploy-pages action

jobs:
  scaffold-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1) Checkout (with push creds)
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          persist-credentials: true

      # 2) Use Node.js 20+
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # 3) Emit every file by hand (package.json, gitignore, tsconfig, configs, src/, etc.)
      - name: Scaffold project files
        run: |
          # â”€â”€â”€ package.json â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
          cat > package.json << 'EOF'
          {
            "name": "${{ github.event.repository.name }}",
            "version": "0.0.1",
            "private": true,
            "scripts": {
              "dev": "vite",
              "build": "vite build",
              "preview": "vite preview",
              "test": "vitest",
              "prepare": "husky install"
            },
            "dependencies": {
              "react": "^18.2.0",
              "react-dom": "^18.2.0"
            },
            "devDependencies": {
              "vite": "*",
              "@vitejs/plugin-react": "*",
              "typescript": "*",
              "tailwindcss": "*",
              "@tailwindcss/vite": "*",
              "postcss": "*",
              "autoprefixer": "*",
              "eslint": "*",
              "eslint-config-prettier": "*",
              "eslint-plugin-react": "*",
              "eslint-plugin-react-hooks": "*",
              "eslint-plugin-jsx-a11y": "*",
              "@typescript-eslint/parser": "*",
              "@typescript-eslint/eslint-plugin": "*",
              "prettier": "*",
              "vitest": "*",
              "@testing-library/react": "*",
              "@testing-library/jest-dom": "*",
              "husky": "*",
              "lint-staged": "*",
              "shadcn": "*"
            },
            "lint-staged": {
              "src/**/*.{js,ts,jsx,tsx}": [
                "eslint --fix",
                "prettier --write"
              ]
            }
          }
          EOF

          # â”€â”€â”€ .gitignore â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
          cat > .gitignore << 'EOF'
          node_modules/
          dist/
          .DS_Store
          EOF

          # â”€â”€â”€ tsconfig.json â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
          cat > tsconfig.json << 'EOF'
          {
            "compilerOptions": {
              "target": "ESNext",
              "useDefineForClassFields": true,
              "lib": ["DOM","DOM.Iterable","ESNext"],
              "skipLibCheck": true,
              "strict": true,
              "module": "ESNext",
              "moduleResolution": "Node",
              "resolveJsonModule": true,
              "isolatedModules": true,
              "noEmit": true,
              "jsx": "react-jsx",
              "baseUrl": ".",
              "paths": {
                "@/components/*": ["components/*"]
              }
            },
            "include": ["src","components"]
          }
          EOF

          # â”€â”€â”€ vite.config.mjs â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
          cat > vite.config.mjs << 'EOF'
          import { defineConfig } from 'vite';
          import react from '@vitejs/plugin-react';
          import tailwindcss from '@tailwindcss/vite';

          export default defineConfig({
            base: '/${{ github.event.repository.name }}/',
            plugins: [react(), tailwindcss()],
            test: {
              globals: true,
              environment: 'jsdom'
            }
          });
          EOF

          # â”€â”€â”€ tailwind.config.js â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
          cat > tailwind.config.js << 'EOF'
          /** @type {import('tailwindcss').Config} */
          module.exports = {
            content: [
              'index.html',
              'src/**/*.{js,ts,jsx,tsx}',
              'components/**/*.{js,ts,jsx,tsx}'
            ],
            theme: { extend: {} },
            plugins: []
          };
          EOF

          # â”€â”€â”€ postcss.config.cjs â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
          cat > postcss.config.cjs << 'EOF'
          module.exports = {
            plugins: {
              tailwindcss: {},
              autoprefixer: {}
            }
          };
          EOF

          # â”€â”€â”€ index.html â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
          cat > index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
            <head>
              <meta charset="UTF-8" />
              <meta name="viewport" content="width=device-width, initial-scale=1.0" />
              <link rel="icon" href="/favicon.ico" />
              <title>Vite + React + TS</title>
            </head>
            <body>
              <div id="root"></div>
              <script type="module" src="/src/main.tsx"></script>
            </body>
          </html>
          EOF

          # â”€â”€â”€ src files â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
          mkdir -p src
          cat > src/index.css << 'EOF'
          @tailwind base;
          @tailwind components;
          @tailwind utilities;
          EOF

          cat > src/main.tsx << 'EOF'
          import React from 'react';
          import ReactDOM from 'react-dom/client';
          import App from './App';
          import './index.css';

          ReactDOM.createRoot(document.getElementById('root')!).render(
            <React.StrictMode>
              <App />
            </React.StrictMode>
          );
          EOF

          cat > src/App.tsx << 'EOF'
          import React from 'react';

          export default function App() {
            return (
              <div className="min-h-screen flex items-center justify-center">
                <h1 className="text-4xl font-bold">Hello, World!</h1>
              </div>
            );
          }
          EOF

          # â”€â”€â”€ ESLint & Prettier configs â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
          cat > .eslintrc.json << 'EOF'
          {
            "root": true,
            "parser": "@typescript-eslint/parser",
            "parserOptions": {
              "ecmaVersion": 2020,
              "sourceType": "module",
              "ecmaFeatures": { "jsx": true }
            },
            "plugins": ["react","react-hooks","@typescript-eslint"],
            "extends": [
              "eslint:recommended",
              "plugin:react/recommended",
              "plugin:@typescript-eslint/recommended",
              "prettier"
            ],
            "settings": { "react": { "version": "detect" } },
            "rules": {}
          }
          EOF

          cat > .prettierrc << 'EOF'
          {
            "semi": true,
            "singleQuote": true,
            "printWidth": 80
          }
          EOF

      # 4) Install & run "prepare" to set up Husky
      - name: Install dependencies & prepare
        run: npm install

      # 5) Add our Husky pre-commit hook
      - name: Setup Husky pre-commit hook
        run: |
          printf "npx lint-staged\n" > .husky/pre-commit
          chmod +x .husky/pre-commit

      # 6) Scaffold shadcn/ui (uses the tsconfig alias)
      - name: Initialize shadcn/ui
        run: npx shadcn@latest init --yes

      # 7) Commit the scaffold back to main
      - name: Commit scaffold to main
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "Scaffold full modern Vite+React+TS+Tailwind+ESLint+Vitest+Husky+shadcn" --no-verify || echo "Nothing to commit"
          git push origin main

      # 8) Build for production
      - name: Build production bundle
        run: npm run build

      # 9) Upload the site as a Pages artifact
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist

      # 10) Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4
